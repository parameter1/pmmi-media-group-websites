import { getAsArray, getAsObject, get } from "@mindful-web/object-path";
import eventLinkAttrs from "@mindful-web/marko-web-p1-events/utils/link-attrs";
import eventEntity from "@mindful-web/marko-web-p1-events/utils/base-content-entity";
import queryFragment from "@mindful-web/marko-web-theme-monorail/graphql/fragments/content-list";
import { buildImgixUrl } from "@mindful-web/image";
import imageHeight from "@mindful-web/marko-web/components/node/utils/image-height";

$ const { id, type, pageNode, ...rest } = input;
$ const sections = getAsArray(input, "sections");
$ const { site, pagination: p, i18n, config } = out.global;
$ const perPage = 12;
$ const lang = site.config.lang || "en";

<global-content-wrapper-layout
  id=id
  type=type
  page-node=pageNode
  ...rest
>
  <@section|{ aliases }| modifiers=["first-sm"]>
    <theme-gam-define-display-ad
      name="leaderboard"
      position="content_page"
      aliases=aliases
      modifiers=["inter-block"]
    />
  </@section>

    <@section|{ aliases, blockName, content }| modifiers=["content-header"]>
      <theme-gam-wallpaper-ad aliases=aliases position="content_page" />
      $ const { primarySection } = content;
      $ const sectionHierarchy = getAsArray(primarySection, 'hierarchy');
      $ // If the section hierarchy contains a root Universal Taxonomy section
      $ if (sectionHierarchy.filter((v) => [87044,87048,87052,87053,88580].includes(v.id)).length) {
        const replacedHierarchy = [sectionHierarchy.pop()]
        primarySection.hierarchy = replacedHierarchy;
      };
      <div>
        <if(!content.isLeader)>
          <div class="content-page-header">
            <theme-content-page-breadcrumbs section=primarySection />
            <marko-web-content-name tag="h1" class="page-wrapper__title" obj=content />
          </div>
        </if>
        <else>
          <div class="content-page-header  content-page-header--full-width">
            <theme-content-page-breadcrumbs section=primarySection />
            <div class="row">
              <div class="col-md-9 col-sm-12 col-lg-10">
                <div class="ldp">
                  <div class="ldp__logo">
                    <global-company-logo content=content />
                  </div>
                  <div class="ldp__title">
                    <marko-web-content-name tag="h1" class="page-wrapper__title" obj=content />
                    <marko-web-content-city-state-zip tag="p" class="text-small text-muted" obj=content />
                  </div>
                </div>
              </div>
              <div class="col-md-3 col-lg-2 col-sm-12 justify-content-center d-flex flex-column px-3 py-3">
                <div class="ldp__social">
                  $ const siteNameDasherized = get(config, "websiteContext.name").toLowerCase().replace(' ', '-');
                  <! $ try {
                    const websiteAsUrl = new URL(content.website);
                    websiteAsUrl.searchParams.set('utm_source', siteNameDasherized);
                    websiteAsUrl.searchParams.set('utm_medium', 'website-link');
                    content.website = websiteAsUrl.toString();
                  } catch (e) {} ->
                  <marko-web-leaders-company-website-link company=content lang=lang/>
                  <div class="mt-2 d-flex justify-content-around">
                    <for|item| of=content.socialLinks>
                    $ try {
                      const itemUrl = new URL(item.url);
                      itemUrl.searchParams.set('utm_source', siteNameDasherized);
                      itemUrl.searchParams.set('utm_medium', 'website-link');
                      item.url = itemUrl.toString();
                    } catch (e) {}
                      <marko-web-leaders-company-social-link company=content item=item />
                    </for>
                  </div>
                </div>
              </div>
            </div>
            <hr>
          </div>
        </else>
      </div>
      <div class="row">
        <div class="col-lg-8">
          <if(p.page === 1)>
            <if(!content.isLeader)>
              $ const { website, ...contentSansWebsite } = content;
              <div class="content-page-body">
                <theme-content-contact-details
                  obj=contentSansWebsite
                  social-link-attrs=eventLinkAttrs({
                    category: "Company Profile Page",
                    label: "Company Social Link",
                    entity: eventEntity(content.id, "company"),
                  })
                />
                $ const websiteLinkAttrs = eventLinkAttrs({
                    category: "Company Profile Page",
                    label: "Company Website",
                    entity: eventEntity(content.id, "company"),
                  });
                $ const displayedWebsiteLink = () => {
                  const websiteAsUrl = new URL(website);
                  return websiteAsUrl.origin;
                }
                <if(website)>
                  <div class="page-contact-details__section">
                    <div class="page-contact-details__content-website">
                      <a ...websiteLinkAttrs href=`${website}`>${displayedWebsiteLink()}</a>
                    </div>
                  </div>
                </if>
              </div>
            </if>
            <else>
              <div class="content-page-body">
                <marko-web-node-list collapsible=false class="mt-block">
                  <@header>
                    ${i18n("Company Overview")}
                  </@header>
                  <@body>
                    <label class="content-section-header content-section-header--border">${i18n("About")} ${content.name}</label>
                    <marko-web-content-teaser tag="p" obj=content />
                    <label class="content-section-header content-section-header--border">${i18n("Product Summary")}</label>
                    <marko-web-obj-text tag="p" obj=content field="productSummary" type="content" html=true />
                  </@body>
                </marko-web-node-list>

                <marko-web-query|{ nodes }|
                  name="all-company-content"
                  params={
                    companyId: id,
                    includeContentTypes: ["Promotion"],
                    queryFragment,
                    limit: 4,
                    withSite: false,
                  }
                >
                  <marko-web-node-list class="mt-block">
                    <@header>
                      ${i18n("Featured Products")}
                    </@header>
                    <@nodes|{ nodes: items }| nodes=nodes>
                      <theme-card-deck-flow cols=4 nodes=items modifiers=["featured-products"]>
                        <@slot|{ node, index }|>
                          <theme-featured-products-card-node
                            company-id=id
                            image-width=340
                            node=node
                          />
                        </@slot>
                      </theme-card-deck-flow>
                    </@nodes>
                  </marko-web-node-list>
                </marko-web-query>

                <marko-web-node-list collapsible=false class="mt-block">
                  <@header>
                    <if(content.isLeader)>${site.get("leaders.title")}</if>
                    <else>${i18n("Company Details")}</else>
                  </@header>
                  <@body>
                    <label class="content-section-header content-section-header--border">${i18n("At-a-glance")}</label>
                    <global-leaders-details company=content lang=lang/>

                    <label class="content-section-header content-section-header--border">${i18n("Contact")}</label>
                    $ const { socialLinks, website, ...contentSansSocial } = content;
                    <theme-content-contact-details obj=contentSansSocial lang=lang />
                    $ const websiteLinkAttrs = eventLinkAttrs({
                        category: "Company Profile Page",
                        label: "Company Website",
                        entity: eventEntity(content.id, "company"),
                      });
                    $ const displayedWebsiteLink = () => {
                      const websiteAsUrl = new URL(website);
                      return websiteAsUrl.origin;
                    }
                    <if(website)>
                      <div class="page-contact-details__section">
                        <div class="page-contact-details__content-website">
                          <a ...websiteLinkAttrs href=`${website}`>${displayedWebsiteLink()}</a>
                        </div>
                      </div>
                    </if>

                    <label class="content-section-header content-section-header--border">${i18n("More info on")} ${content.name}</label>
                    <global-content-body-with-tracking block-name="leaders-more-info" content=content />
                  </@body>
                </marko-web-node-list>
              </div>
              $ const videos = getAsArray(content, "videos.edges").map(({ node }) => node);
              <marko-web-node-list class="mt-block">
                <@header>
                  ${i18n("Featured Videos")}
                </@header>
                <@nodes|{ nodes }| nodes=videos>
                  <theme-card-deck-flow cols=3 nodes=nodes modifiers=["featured-videos"]>
                    <@slot|{ node, index }|>
                      <div class="node-list__node">
                        <theme-youtube-card-node
                          node=node
                          company-id=content.id
                          image-position="top"
                          link-attrs={
                            "data-company-id": content.id,
                            "data-company-name": content.name,
                          }
                        />
                      </div>
                    </@slot>
                  </theme-card-deck-flow>
                </@nodes>
                <@footer>
                  $ const url = get(content, "youtube.url");
                  <a href=url target="_blank" rel="noopener" class="btn btn-sm btn-block btn-secondary">
                    ${i18n("View all videos")} &gt;
                  </a>
                </@footer>
              </marko-web-node-list>

              <theme-latest-content-list-block
                query-name="all-company-content"
                query-params={ companyId: id, includeContentTypes: ["Article"], includeLabels: ["Case Study"], limit: 5, withSite: false }
                title=`${i18n("Case Studies")}`
                with-native-x-section=false
                flush-x=false
                class="mt-block"
              >
                <@node with-dates=false />
              </theme-latest-content-list-block>

              <theme-latest-content-list-block
                query-name="all-company-content"
                query-params={ companyId: id, includeContentTypes: ["News", "PressRelease"], withSite: false, limit: 5 }
                title=`${i18n("Company News")}`
                with-native-x-section=false
                flush-x=false
                class="mt-block"
              >
                <@node with-dates=false />
              </theme-latest-content-list-block>

            </else>
            <${input.afterBody}
              aliases=aliases
              block-name=blockName
              content=content
            />
          </if>
          <div class="content-page-latest-content">
            $ const latestTitle = (p.page > 1) ? `${i18n("From")} ${content.name} - ${i18n("Page")} ${p.page}` : `${i18n("From")} ${content.name}`;
            <theme-latest-content-list-block
              query-name="all-company-content"
              query-params={
                companyId: id,
                requiresImage: true,
                excludeContentTypes: ["Promotion"],
                limit: perPage,
                skip: p.skip({ perPage }),
                withSite: false,
              }
              title=latestTitle
              with-native-x-section=false
              flush-x=false
              class="mt-block"
            >
              <@node with-dates=false />
            </theme-latest-content-list-block>
            <theme-section-feed-block|{ totalCount }| query-name="all-company-content" count-only=true>
              <@query-params
                companyId=content.id
                requiresImage=true
                excludeContentTypes=["Promotion"]
              />
              <theme-pagination-controls
                per-page=perPage
                total-count=totalCount
                path=get(content, "siteContext.path")
              />
            </theme-section-feed-block>
          </div>
        </div>

        <div class="col-lg-4 pt-block">
          $ const inquiry = site.getAsObject('inquiry');
          <if(content.isLeader)>
            <theme-company-inquiry-form-block content=content initially-expanded=false consent-checkboxes=getAsArray(site, 'config.inquiry.consentCheckboxes') />
            <global-company-booth-block salesforce-account-id=content.salesforceAccountId modifiers=["rail"] />
            $ const contacts = getAsArray(content, "contacts.edges").map(({ node }) => node);
            <marko-web-node-list class="mt-block">
              <@header>
                <if(contacts.length > 1)>
                  ${i18n("Key Contacts")}
                </if>
                <else>
                  ${i18n("Key Contact")}
                </else>
              </@header>
              <@nodes|{ nodes }| nodes=contacts>
                <for|node| of=nodes>
                  <theme-author-card-node node=node with-email=true />
                </for>
              </@nodes>
            </marko-web-node-list>
          </if>
        </div>
      </div>
    </@section>

  <for|s| of=sections>
    <@section|{ blockName, content, aliases }| modifiers=s.modifiers>
      <${s.renderBody}
        block-name=blockName
        content=content
        aliases=aliases
      />
    </@section>
  </for>
</global-content-wrapper-layout>
