import { get, getAsArray } from "@mindful-web/object-path";
import contentIframe from "@pmmi-media-group/package-global/utils/content-iframe";
import getContentPreview from "@mindful-web/marko-web-theme-monorail/utils/get-content-preview";
import handleContentTypePrimarySection from "@pmmi-media-group/package-global/utils/handle-content-type-primary-section";
import GlobalBodyWithInjection from "@pmmi-media-group/package-global/components/body-with-injection";
import splitContentBody from "@pmmi-media-group/package-global/utils/split-content-body";
import { shouldOverlay, restrictContentByReg, shouldTruncate } from "@mindful-web/marko-web-theme-monorail/utils/content-meter-helpers";

$ const { global: $global } = out;
$ const {
  site,
  config,
  contentAccessState,
  contentGatingHandler,
  contentMeterState,
  req,
  i18n
} = out.global;
$ const { id, type, pageNode, showReadNextBlock, showBottomAdBlock, showTopStoryBlock, ...rest } = input;
$ const sections = getAsArray(input, "sections");

$ contentAccessState.setFormDisplay({ req });
$ const { formId: idxFormId, displayForm: displayIdxForm, cookie: idxSuveyCookie } = contentAccessState;

$ const showOverlay = shouldOverlay(contentMeterState);


$ const leadersContentTypes = input.leadersContentTypes || ["article", "blog", "media-gallery", "news", "podcast", "press-release", "product", "video", "webinar"];
$ const displayPrimaryImage = ["media-gallery", "document", "podcast"].includes(type) ? false : true;
$ const displayPublishedDate = ["company", "contact", "whitepaper"].includes(type) ? false : true;
$ const displayReadNext = showReadNextBlock && ["article"].includes(type);
$ const displaySocialShare = ["contact"].includes(type) ? false : true;
$ const displayComments = false; // ["contact"].includes(type) ? false : true;
$ const displayNewsletterSignup = ["contact"].includes(type) ? false : true;
$ const continueLabel = i18n("Sign Me Up!");
$ const loginEmailLabel = i18n("Work Email");
$ const gateTitle = i18n("Your email helps us uphold our standards of quality content. Unlock full access to our articles with a quick submission.");
$ const gateButtonLabels = { continue: i18n("Continue") };
$ const gateEmailLabel = i18n("Email Address");
$ const actionText = i18n("signing up to receive your email notifications");
$ const buttonLabels = { continue: continueLabel };
$ const shouldInjectAds = ["article", "blog", "news", "podcast", "press-release", "product", "video"].includes(type);

<global-content-wrapper-layout
  id=id
  type=type
  page-node=pageNode
  ...rest
>
  <@section|{ aliases }| modifiers=["first-sm"]>
    <if(type !== "document")>
      <theme-gam-define-display-ad
        name="leaderboard"
        position="content_page"
        aliases=aliases
        modifiers=["inter-block"]
      />
      <theme-gam-wallpaper-ad aliases=aliases position="content_page" />
    </if>
  </@section>

  <@section|{ blockName, content, aliases, authors }| modifiers=["content-header"]>
    $ const { primarySection } = content;
    <div class="content-page-header">
      <if(primarySection.alias === 'emergingbrands' && primarySection.logo)>
        <marko-web-link href=primarySection.canonicalPath title=primarySection.name>
          $ const obj = { ...primarySection.logo, alt: `${primarySection.name} Logo` };
          <marko-web-page-image
            width=375
            fluid=false
            lazyload=false
            modifiers=["section-logo"]
            obj=obj
          />
        </marko-web-link>
      </if>
      <else>
        $ const sectionHierarchy = getAsArray(primarySection, 'hierarchy');
        $ // If the section hierarchy contains a root Universal Taxonomy section
        $ if (sectionHierarchy.filter((v) => [87044,87048,87052,87053,88580].includes(v.id)).length) {
          const replacedHierarchy = [sectionHierarchy.pop()]
          primarySection.hierarchy = replacedHierarchy;
        };
        <if(["event", "podcast", "webinar"].includes(content.type))>
          $ const handledPrimarySection = handleContentTypePrimarySection({ i18n, node: content });
          $ const handledPrimarySectionWithHierarchy = {
            ...handledPrimarySection,
            hierarchy: [handledPrimarySection],
          };
          <theme-content-page-breadcrumbs section=handledPrimarySectionWithHierarchy />
        </if>
        <else>
          <theme-content-page-breadcrumbs section=primarySection />
        </else>
      </else>
      <marko-web-content-name tag="h1" block-name=blockName obj=content />
      <marko-web-content-teaser tag="p" class="page-wrapper__deck" obj=content />
      <if(type !== "contact")>
        <theme-content-attribution obj=content />
      </if>
      <if(displayPublishedDate)>
        <theme-page-dates|{ blockName }|>
          <theme-content-published-node block-name=blockName obj=content />
        </theme-page-dates>
      </if>
      <global-sponsored-section-logo alias=primarySection.alias modifiers=["content-page"] class="mt-3" />
      <if(displaySocialShare)>
        <marko-web-social-sharing
          path=content.siteContext.path
          providers=["print", "email", "facebook", "linkedin", "twitter", "pinterest"]
          print-path=`/print/content/${content.id}`
        />
      </if>
    </div>
  </@section>

  <@section|{ aliases, content, authors }| modifiers=["content-body"]>
    $ const { primarySection } = content;
    $ const displayRail = ((content.company && content.company.enableRmi) || type !== "document");
    <div class="row">
      $ const colClass = displayRail ? "col-lg-8" : "col-lg-12"
      <div class=colClass>
      $ const bodyClass = displayRail ? "content-page-body" : "";
        <div class=bodyClass>
          <theme-page-contents|{ blockName }| attrs={ "data-gallery-id": id }>
            $ const requiresRegistration = contentGatingHandler({ content }) || restrictContentByReg(contentMeterState, contentGatingHandler, content);
            $ const accessLevels = getAsArray(content, "userRegistration.accessLevels");
            <marko-web-identity-x-access|context|
              enabled=requiresRegistration
              required-access-level-ids=accessLevels
            >
              <if(idxFormId)>
                <if(displayIdxForm)>
                  $ const body = getContentPreview({ body: content.body, selector: "p:lt(5)" });
                  <marko-web-content-body block-name=blockName obj={ body } />
                  <div class="content-page-preview-overlay" />
                  <marko-web-content-body block-name=blockName attrs={ style: "display: none;" } obj=content modifiers=["ld-json"] />
                    <marko-web-identity-x-context|{ hasUser, user, application }|>
                    <if(hasUser)>
                      <marko-web-identity-x-form-access
                        content=content
                        user=user
                        formId=idxFormId
                        application=application
                      />
                    </if>
                    <else>
                      <marko-web-identity-x-non-auth-identify|{ user: identifiedUser }|>
                        <marko-web-identity-x-form-access
                          updateProfileOnSubmit=false
                          content=content
                          user=identifiedUser
                          formId=idxFormId
                          application=application
                        />
                      </marko-web-identity-x-non-auth-identify>
                    </else>
                  </marko-web-identity-x-context>
                </if>
                <else>
                  $ const bodyId = `content-body-${content.id}`;
                  <theme-body-with-injection
                    content=content
                    aliases=[]
                    block-name=blockName
                    selector=bodyId
                    preventHTMLInjection=true
                  />
                </else>
              </if>
              <else-if(shouldOverlay(contentMeterState))>
                $ const body = showOverlay ? getContentPreview({ body: content.body, selector: "p:lt(5)" }) : getContentPreview({ body: content.body, selector: "p:nth-of-type(1)" });
                <marko-web-content-body block-name=blockName obj={ body } lazyload-first-image=false />

                <div class="content-page-preview-overlay" />
                <if(!showOverlay)>
                  <theme-content-page-gate
                    can-access=context.canAccess
                    is-logged-in=context.isLoggedIn
                    has-required-access-level=context.hasRequiredAccessLevel
                    requires-access-level=context.requiresAccessLevel
                    requires-user-input=context.requiresUserInput
                    messages=context.messages
                    user-input-title="Step 2 of 2"
                    profile-call-to-action=""
                    profile-button-label="Create Account"
                    profile-event-name="content_meter_profile"
                  />
                </if>
              </else-if>
              <else-if(!context.canAccess || context.requiresUserInput)>
                $ const body = getContentPreview({ body: content.body, selector: "p:lt(5)" });
                $ const primaryImage = getContentPreview({primaryImage: content.primaryImage, selector: "primaryImage" });
                <theme-primary-image-block
                  obj=content.primaryImage
                  fluid-width=700
                />
                <global-supplier-submitted-block labels=content.labels />
                <marko-web-content-body block-name=blockName obj={ body } />

                <div class="content-page-preview-overlay" />
                <theme-content-page-gate
                  can-access=context.canAccess
                  is-logged-in=context.isLoggedIn
                  has-required-access-level=context.hasRequiredAccessLevel
                  requires-access-level=context.requiresAccessLevel
                  requires-user-input=context.requiresUserInput
                  messages=context.messages
                  button-labels=gateButtonLabels
                  login-email-label=gateEmailLabel
                  title=gateTitle
                  action-text=actionText
                />
                <!-- Hidden content body field for seo purposes when content is gated. -->
                <marko-web-content-body block-name=blockName attrs={ style: "display: none;" } obj=content modifiers=["ld-json"] />
              </else-if>
              <else>
                <if(content.embedCode)>
                  $ const iframeContent = contentIframe(content);
                  <marko-web-content-embed-code block-name=blockName obj=iframeContent />
                  <if(content.transcript)>
                    <marko-web-link href=`#transcript-${id}` class="btn btn-transcript mt-block mb-2" title="Transcript">
                      <marko-web-icon name="file" modifiers=["lg"] /> Transcript
                    </marko-web-link>
                  </if>
                </if>
                <else-if(type === "media-gallery")>
                  <!-- <marko-web-image-slider images=images /> -->
                </else-if>
                <else-if(displayPrimaryImage)>
                  $ let forceDisplay;
                  $ if (type === "contact") forceDisplay = "left";
                  $ if (type === "video") forceDisplay = "none";
                  <theme-primary-image-block
                    obj=content.primaryImage
                    force-display=forceDisplay
                    fluid-width=700
                  />
                </else-if>
                $ const bodyId = `content-body-${content.id}`;

                <global-supplier-submitted-block labels=content.labels />
                <if(type === "article")>
                  $ const contentBodyWithInjections = GlobalBodyWithInjection.renderToString({
                    content,
                    aliases,
                    blockName,
                    selector: bodyId,
                    preventHTMLInjection: !shouldInjectAds,
                    $global
                  });
                  $ const { partOne, partTwo } = splitContentBody({ body: content.body, contentBodyWithInjections });
                  <marko-web-content-body block-name=blockName obj={ body: partOne } />
                  <if(partTwo)>
                    <div id="content-page-preview-overlay" class="content-page-preview-overlay" />
                    <marko-web-browser-component
                      name="GlobalStoryContinuesButton"
                      props={ label: i18n("Story Continues") }
                    />
                    <marko-web-content-body
                      block-name=blockName
                      obj={ body: partTwo }
                      attrs={ style: "display: none;", id: "content-body-part-two" }
                      modifiers=["ld-json"]
                    />
                  </if>
                </if>
                <else>
                  <theme-body-with-injection
                    content=content
                    aliases=aliases
                    block-name=blockName
                    selector=bodyId
                    preventHTMLInjection=!shouldInjectAds
                  />
                </else>
                <if(content.transcript)>
                  $ const transcriptId = `content-transcript-${content.id}`;
                  <div id=`transcript-${id}` class="page-contents__content-transcript">
                    <marko-web-element block-name="page-contents" name="content-transcript-title">
                      <marko-web-icon name="file" modifiers=["lg"] /> Transcript
                    </marko-web-element>
                    <theme-body-with-injection
                      content={ body: content.transcript }
                      aliases=aliases
                      block-name=blockName
                      selector=transcriptId
                      preventHTMLInjection=!shouldInjectAds
                    />
                  </div>
                </if>

                <!-- needs input -->
                <if(input.afterBody)>
                  <${input.afterBody}
                    aliases=aliases
                    block-name=blockName
                    content=content
                  />
                </if>

                <if(context.canAccess && !context.requiresUserInput)>
                  <marko-web-content-sidebar-stubs|{ sidebar }|
                    obj={ sidebarStubs: getAsArray(content, "sidebars") }
                    block-name=blockName
                  >
                    <div id=sidebar.sequence class="page-contents__content-sidebar">
                      <if(sidebar.name)>
                        <p><b>${sidebar.name}</b></p>
                      </if>
                      <div>$!{sidebar.body}</div>
                    </div>
                  </marko-web-content-sidebar-stubs>
                </if>

                <if(site.get("leaders.enabled") && leadersContentTypes.includes(content.type))>
                  <marko-web-leaders-featured-companies content=content />
                </if>

                <if(type === "document" || type === "whitepaper")>
                  <theme-content-download obj=content>
                    <@wufoo user-name=site.get("wufoo.userName") />
                    <@link class="btn btn-primary" />
                  </theme-content-download>
                </if>

                <if(type !== "contact")>
                  <for|author| of=authors>
                    <if(getAsArray(author, "labels").includes("Contributor"))>
                      <marko-web-content-body obj=author block-name="inline-author-bio" />
                    </if>
                  </for>
                </if>

                <if(displayReadNext)>
                  <theme-read-next-block
                    content-id=id
                    section-id=primarySection.id
                    published=content.published
                  />
                </if>

                <if(displaySocialShare)>
                  <marko-web-social-sharing
                    path=content.siteContext.path
                    providers=["print", "facebook", "linkedin", "twitter", "pinterest"]
                    print-path=`/print/content/${content.id}`
                  />
                </if>

                <if(site.get("leaders.enabled") && leadersContentTypes.includes(content.type))>
                  <marko-web-leaders-company-videos content-id=content.id />
                </if>

                <!-- Div for BI Library -->
                <marko-web-gtm-slot prefix=site.get("gtm.slotPrefix") name="article-bilibrary" class="mt-3" />

                <if(type !== "document")>
                  <theme-gam-define-display-ad
                    name="inline-content"
                    position="content_page"
                    aliases=aliases
                    modifiers=["inline-content"]
                  />
                </if>

                <if(displayNewsletterSignup)>
                  <marko-web-identity-x-context|{ hasUser }|>
                    <if(!hasUser)>
                      <identity-x-newsletter-form-inline
                        button-labels=buttonLabels
                        login-email-label=loginEmailLabel
                        login-email-placeholder=i18n("example@yourcompany.com")
                        type="inlineContent"
                        action-text=actionText
                        image-width="120"
                        image-height="242"
                      />
                    </if>
                  </marko-web-identity-x-context>
                </if>

              </else>
            </marko-web-identity-x-access>

            <if(displayComments)>
              <theme-identity-x-comment-stream content=content />
            </if>
          </theme-page-contents>
        </div>
      </div>
      <if(site.get("leaders.enabled") && displayRail)>
        <div class="col-lg-4">
          <if(content.company && content.company.enableRmi)>
            <div class="mb-block">
              <theme-company-inquiry-form-block content=content initially-expanded=false consent-checkboxes=getAsArray(site, 'config.inquiry.consentCheckboxes') />
            </div>
          </if>
          <if(type !== "document")>
            <div class="mb-block">
              <global-leaders-contextual content-id=id />
            </div>
          </if>
          <div class="mb-block">
            <global-native-x-list-block aliases=aliases audience-only=true />
          </div>
          <marko-web-identity-x-context|{ hasUser }|>
            <if(!hasUser && Object.keys(site.getAsObject(`newsletter.contentRailBanner`)).length)>
              <div class="newsletter-signup-banner-content-rail">
                <identity-x-newsletter-form-inline
                  button-labels=buttonLabels
                  login-email-label=loginEmailLabel
                  login-email-placeholder=i18n("example@yourcompany.com")
                  type="inlineContent"
                  action-text=actionText
                  with-image=false
                  config-name="contentRailBanner"
                />
              </div>
            </if>
          </marko-web-identity-x-context>
        </div>
      </if>
      <else-if(!site.get("leaders.enabled") && displayRail)>
        <div class="col-lg-4">
          $ const excludeContentTypes = ["Contact", "Company", "Document", "TextAd", "Promotion"];
          <theme-latest-content-list-block
            title=`Latest in ${primarySection.name}`
            alias=primarySection.alias
            query-params={ excludeContentTypes, excludeContentIds: [content.id] }
            class="sticky-top"
          >
            <@native-x index=4 name="related-content" aliases=aliases />
          </theme-latest-content-list-block>
        </div>
      </else-if>
    </div>
  </@section>

  <@section|{ content }|>
    <theme-related-stories-block
      content-id=content.id
      section-id=content.primarySection.id
      published=content.published
      with-native-x=true
    />
  </@section>

  <if(showBottomAdBlock && type !== "document")>
    <@section|{ aliases }|>
      <theme-gam-define-display-ad
        name="rotation"
        position="content_page"
        aliases=aliases
        modifiers=["inter-block"]
      />
    </@section>
  </if>

  <if(["5d88cedef175132c008b456b"].includes(get(config, "websiteContext.id")))>
    <@section>
      <theme-content-card-deck-block
        query-params={ includeLabels: ["Machinery Basics"], limit: 4 }
        section={ name: "Machinery Basics", canonicalPath: "/machinery-basics" }
      />
    </@section>
  </if>

  <if(showTopStoryBlock)>
    <@section>
      <theme-top-stories-block />
    </@section>
  </if>

  <for|s| of=sections>
    <@section|{ blockName, content, aliases }| modifiers=s.modifiers>
      <${s.renderBody}
        block-name=blockName
        content=content
        aliases=aliases
      />
    </@section>
  </for>
</global-content-wrapper-layout>
